graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(summaryTable_use)
View(abundanceArray_meanSubjects_longer)
mod(3,3)
modulo(3,3)
3 %% 3
3 %% 4
4 %% 4
(1-1) %% 4 + 1
(2-1) %% 4 + 1
(3-1) %% 4 + 1
(4-1) %% 4 + 1
(4-1) %% 3 + 1
(3-1) %% 3 + 1
(6-1) %% 3 + 1
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
useTotalAbundance=0 #if zero, relative abundance is returned
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
#### totalAbundance_df : increase in total abundance over time - this is needed to be used as the denominator of the interaction parameters
# abundanceArray_allSubjects
# abundanceArray_allSubjects_mum
# saved_data
# saved_data_milkandsolid
# saved_data_solid
# abundanceArray_meanSubjects
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
taxa_array     = unique(saved_data_infant$taxa)
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/06062023/RDATA';
fileNamePick  = paste0(pathModelOutput,"/MODEL_C0_1686065726.RData")
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fitSummary    = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
n_chains <- fit@sim$chains
n_warmup <- fit@sim$warmup2[1]
n_iter   <-fit@sim$iter[[1]]
print(c(n_iter,n_warmup,n_chains))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[(as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])-1 %% length(taxa_array) +1) )
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[(as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))-1 %% length(taxa_array) +1])
View(summaryTable_use)
taxa_array
(as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))-1 %% length(taxa_array) +1
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))
View(summaryTable_use)
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))
View(summaryTable_use)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx_name = (taxa_idx-1) %% length(taxa_array) + 1)
View(summaryTable_use)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[taxa_idx_name])
View(summaryTable_use)
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
View(abundanceArray_meanSubjects_longer)
View(abundanceArray_meanSubjects_longer)
View(summaryTable_use)
View(summaryTable_use)
summaryTable_use_agg = aggregate(mean ~ taxa + t,summaryTable_use, FUN=sum)
View(summaryTable_use_agg)
View(abundanceArray_meanSubjects)
summaryTable_use_keep = summaryTable_use
summaryTable_use = summaryTable_use_agg
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
# abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<10)
# summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(summaryTable_use_agg)
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx_name = (taxa_idx-1) %% length(taxa_array) + 1)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[taxa_idx_name])
summaryTable_use_agg = aggregate(`50%` ~ taxa + t,summaryTable_use, FUN=sum)
summaryTable_use_keep = summaryTable_use
summaryTable_use = summaryTable_use_agg
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
# abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<10)
# summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<10)
summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
interactionMat_vector_in
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
useTotalAbundance=0 #if zero, relative abundance is returned
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
#### totalAbundance_df : increase in total abundance over time - this is needed to be used as the denominator of the interaction parameters
# abundanceArray_allSubjects
# abundanceArray_allSubjects_mum
# saved_data
# saved_data_milkandsolid
# saved_data_solid
# abundanceArray_meanSubjects
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
# read these from saved tables
# use 1685924896 in /Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/04062023/RDATA as demo
estimations_growth      = read_excel('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/04062023/RDATA/GROWTH_1685924896.xlsx', sheet='mean')
estimations_interaction = read_excel('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/04062023/RDATA/INTERACTIONS_1685924896.xlsx', sheet='mean')
growthRate_vector_in    = unlist(estimations_growth)
interactionMat_vector_in= as.vector(unlist(estimations_interaction))
interactionMat_vector_in
growthRate_vector_in
abundanceArray_meanSubjects
View(abundanceArray_meanSubjects)
y0_meanSubjects
a=c(-2.34376,-3.06438,-0.372495,-0.622901,-1.3631,-0.439044,0.147618,0.124105,0.142184,-0.360416)
b=c(0.0608464,-0.0675739,0.140942,0.0278826,0.00371243,0.00109101,-0.00858255,0.0201991,-0.0044223,0.0467245)
a*b
sum(a*b)
round(mean(unlist(saved_data_solid$day)))
k_solid = 0.5
round(mean(unlist(saved_data_solid$day)))
round(mean(unlist(saved_data_milkandsolid$day)))
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_C0.rds")){
file.remove("MODELS/MODEL_C0.rds")
}
M_model  = stan_model("MODELS/MODEL_C0.stan")
data_list$t_solid
data_list
round(mean(unlist(saved_data_solid$day)))
round(mean(unlist(saved_data_milkandsolid$day)))
max(days_array)
round(mean(unlist(saved_data_milkandsolid$day)))
round(mean(unlist(saved_data_solid$day)))
mc.cores
days_array
days_array = days_array[days_array<=30]
days_array
abundanceArray_meanSubjects
View(abundanceArray_meanSubjects)
LENGTH(days_array)
length(days_array)
abundanceArray_meanSubjects = abundanceArray_meanSubjects[1:length(days_array),]
abundanceArray_meanSubjects
days_array
length(days_array)
ts_pred
index_check_1 = which(days_array==30)
index_check_1
index_check_1 = which(days_array==10)
index_check_2 = which(days_array==30)
index_check_1
index_check_2
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
useTotalAbundance=0 #if zero, relative abundance is returned
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
#### totalAbundance_df : increase in total abundance over time - this is needed to be used as the denominator of the interaction parameters
# abundanceArray_allSubjects
# abundanceArray_allSubjects_mum
# saved_data
# saved_data_milkandsolid
# saved_data_solid
# abundanceArray_meanSubjects
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
taxa_array     = unique(saved_data_infant$taxa)
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/06062023/RDATA';
fileNamePick  = paste0(pathModelOutput,"/MODEL_C0_1686079529.RData")
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fitSummary    = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
n_chains <- fit@sim$chains
n_warmup <- fit@sim$warmup2[1]
n_iter   <-fit@sim$iter[[1]]
print(c(n_iter,n_warmup,n_chains))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx_name = (taxa_idx-1) %% length(taxa_array) + 1)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[taxa_idx_name])
summaryTable_use_agg = aggregate(`50%` ~ taxa + t,summaryTable_use, FUN=sum)
summaryTable_use_keep = summaryTable_use
summaryTable_use = summaryTable_use_agg
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<10)
summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
# graphics.off()
# ggplot(summaryTable_use, aes(x = t, y = mean, color = taxa)) + geom_point()
# Save the interaction matricies to compare
abundanceArray_meanSubjects
View(abundanceArray_meanSubjects_longer)
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
useTotalAbundance=0 #if zero, relative abundance is returned
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
#### totalAbundance_df : increase in total abundance over time - this is needed to be used as the denominator of the interaction parameters
# abundanceArray_allSubjects
# abundanceArray_allSubjects_mum
# saved_data
# saved_data_milkandsolid
# saved_data_solid
# abundanceArray_meanSubjects
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
taxa_array     = unique(saved_data_infant$taxa)
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/06062023/RDATA';
fileNamePick  = paste0(pathModelOutput,"/MODEL_C0_1686079529.RData")
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fitSummary    = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
n_chains <- fit@sim$chains
n_warmup <- fit@sim$warmup2[1]
n_iter   <-fit@sim$iter[[1]]
print(c(n_iter,n_warmup,n_chains))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
# coated uncoated labelling
# taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
# summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))])
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx = as.numeric(sub(",.*","",sub(".*\\_", "", taxa))))
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa_idx_name = (taxa_idx-1) %% length(taxa_array) + 1)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[taxa_idx_name])
summaryTable_use_agg = aggregate(`50%` ~ taxa + t,summaryTable_use, FUN=sum)
summaryTable_use_keep = summaryTable_use
summaryTable_use = summaryTable_use_agg
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
# abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<10)
# summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(abundanceArray_meanSubjects_longer)
View(summaryTable_use)
max(summaryTable_use$t)
View(summaryTable_use)
View(summaryTable_use_agg)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
# graphics.off()
# ggplot(summaryTable_use, aes(x = t, y = mean, color = taxa)) + geom_point()
# Save the interaction matricies to compare
abundanceArray_meanSubjects
View(summaryTable_use)
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(day<max(summaryTable_use$t))
# summaryTable_use = summaryTable_use %>% filter(t<10)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
