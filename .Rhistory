}
paramNames
color_scheme_set("brightblue")
mcmc_dens(posterior, pars = paramNames,
facet_args = list(ncol = 1, strip.position = "left"))
posterior     = as.array(fit)
mcmc_dens(posterior, pars = paramNames,
facet_args = list(ncol = 1, strip.position = "left"))
color_scheme_set("viridis")
mcmc_trace(posterior, pars = paramNames,
facet_args = list(ncol = 1, strip.position = "left"))
color_scheme_set("red")
mcmc_intervals(posterior, pars = paramNames)
color_scheme_set("brightblue")
mcmc_intervals(posterior, pars = paramNames)
paramRoot     = as.name('interactionMat_vector_nondiag')
numOfParams   = dim(list_of_draws[[paramRoot]])[2]
paramNames=c()
for(i in 1:numOfParams){
paramNames = c(paramNames,paste0('interactionMat_vector_diag[',i,']'))
}
color_scheme_set("brightblue")
mcmc_dens(posterior, pars = paramNames,
facet_args = list(ncol = 1, strip.position = "left"))
paramRoot
fit           = loadedModel
fit_summary   = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
paramRoot     = as.name('interactionMat_vector_nondiag')
numOfParams   = dim(list_of_draws[[paramRoot]])[2]
paramNames=c()
for(i in 1:numOfParams){
paramNames = c(paramNames,paste0(paramRoot,'[',i,']'))
}
color_scheme_set("brightblue")
mcmc_dens(posterior, pars = paramNames,
facet_args = list(ncol = 1, strip.position = "left"))
color_scheme_set("brightblue")
mcmc_intervals(posterior, pars = paramNames)
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 2
fileNamePick  = paste0(pathModelOutput,"/",fileList[1])
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fit_summary   = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
paramRoot     = as.name('interactionMat_vector_nondiag')
numOfParams   = dim(list_of_draws[[paramRoot]])[2]
paramNames=c()
for(i in 1:numOfParams){
paramNames = c(paramNames,paste0(paramRoot,'[',i,']'))
}
fileNamePick
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 2
fileNamePick  = paste0(pathModelOutput,"/",fileList[indexPick])
fileNamePick
fileList[indexPick]
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 3
fileNamePick  = paste0(pathModelOutput,"/",fileList[indexPick])
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fit_summary   = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
paramRoot     = as.name('interactionMat_vector_diag')
numOfParams   = dim(list_of_draws[[paramRoot]])[2]
paramNames=c()
for(i in 1:numOfParams){
paramNames = c(paramNames,paste0(paramRoot,'[',i,']'))
}
fileList[indexPick]
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 3
fileNamePick  = paste0(pathModelOutput,"/",fileList[indexPick])
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fit_summary   = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
dataOrig      = standata(fit)
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 3
fileNamePick  = paste0(pathModelOutput,"/",fileList[indexPick])
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
rm(list=ls())
library("bayesplot")
library("ggplot2")
library("rstanarm")
library('rstan')
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/31052023/RDATA';
fileList = list.files(path =pathModelOutput)
##### Pick the file
indexPick     = 2
fileNamePick  = paste0(pathModelOutput,"/",fileList[indexPick])
#################################################
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
dataOrig      = standata(fit)
# setwd(getwd())
workingDir = '/home/bt6725/RStan/';
# setwd(getwd())
workingDir = '/home/bt6725/RStan/';
print("Working directory: ",workingDir)
print(workingDir)
print(direc2save)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
mc.cores
# Set-up
library(tidyverse)
library(lubridate)
library(rstan)
library(cowplot)
library(readxl)
library(foreign)
library(xtable)
library(rstan)
library(zoo)
library(Rcpp)
library(reticulate)
library(icesTAF)
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
options(mc.cores = parallel::detectCores())
mc.cores
mc.cores = parallel::detectCores()
mc.cores
print(mc.cores = parallel::detectCores())
mc.cores = parallel::detectCores()
print(mc.cores)
print(c('cores: ',mc.cores))
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(haven)
library(dplyr)
library(plyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(forcats)
library(lubridate)
library(readxl)
library(writexl)
library(Hmisc)
library(Hmisc)
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(haven)
library(dplyr)
library(plyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(forcats)
library(lubridate)
library(readxl)
library(writexl)
library(Hmisc)
library(zoo)
library(Rcpp)
library(gsubfn)
library(dendextend)
library(hrbrthemes)
library(tidyverse)
library(RColorBrewer)
library(viridis)
library(grid)
library(tidyr)
library(rlist)
library(gtools)
library(stringi)
library(paletteer)
library(gplots)
library("ggpubr")
library('GOplot')
# listMarts()
# ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
# filters = listFilters(ensembl)
source("/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/deg_functions.R")
################ TREATMENT, SUBJECT, AND GROUP CODES #########################################################
treatments     = c('NC','PC')
data_NC  = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/Data_Johannes_2023/result--NC_P_HIVN--over--NC_N_HIVN.xlsx')
data_NC  = data_NC %>% dplyr::filter(isPresent=='TRUE')
data_IDs = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/Data_Johannes_2023/FGCZ_ids_controls_vs_case_HIV.xlsx')
gsea_NC_HIV_N_BP  = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/Data_Johannes_2023/NC_P_HIVN--over--NC_N_HIVN--GSEA_results.xlsx',
sheet = 'BP')
gsea_NC_HIV_N_MF  = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/Data_Johannes_2023/NC_P_HIVN--over--NC_N_HIVN--GSEA_results.xlsx',
sheet = 'MF')
gsea_NC_HIV_N_CC  = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/Data_Johannes_2023/NC_P_HIVN--over--NC_N_HIVN--GSEA_results.xlsx',
sheet = 'CC')
data_subjects_HIV_NEG  = read_excel('/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/MERGED_TABLE_HIV_NEG_ONLY_LTBI.xlsx')
data_IDs_HIV_N = data_IDs %>% dplyr::filter(HIV=='N')
ltbi_masterlist   = read.csv("/Users/burcutepekule/Library/CloudStorage/Dropbox/LTBI_HIV_transcriptome/ltbi_masterlist.csv")
data_subjects_HIV_N_LTBI_P = data_subjects_HIV_NEG %>% dplyr::filter(id_ltbi %in% data_IDs_HIV_N$id_case)
data_subjects_HIV_N_LTBI_N = data_subjects_HIV_NEG %>% dplyr::filter(id_healthy %in% data_IDs_HIV_N$id_contorls)
#####################################
gsea_NC_HIV_N_BP$Category = 'BP'
gsea_NC_HIV_N_MF$Category = 'MF'
gsea_NC_HIV_N_CC$Category = 'CC'
gsea_NC_HIV_N_BP = gsea_NC_HIV_N_BP[c('Category','ID','Description','geneName','p.adjust')]
gsea_NC_HIV_N_MF = gsea_NC_HIV_N_MF[c('Category','ID','Description','geneName','p.adjust')]
gsea_NC_HIV_N_CC = gsea_NC_HIV_N_CC[c('Category','ID','Description','geneName','p.adjust')]
colnames(gsea_NC_HIV_N_BP) = c('Category','ID','Term','Genes','adj_pval')
colnames(gsea_NC_HIV_N_MF) = c('Category','ID','Term','Genes','adj_pval')
colnames(gsea_NC_HIV_N_CC) = c('Category','ID','Term','Genes','adj_pval')
gsea_NC_HIV_N = rbind(gsea_NC_HIV_N_BP,gsea_NC_HIV_N_MF,gsea_NC_HIV_N_CC)
gsea_NC_HIV_N$Genes = str_replace_all(gsea_NC_HIV_N$Genes, "/", ", ")
data_NC_use = data_NC[c('gene_name',"log2 Ratio","pValue")]
colnames(data_NC_use)=c('ID','logFC','P.Value')
circ <- circle_dat(gsea_NC_HIV_N, data_NC_use)
gene_mat = as.data.frame(data_NC_use[c('ID','logFC')])
gene_mat = gene_mat %>% filter(abs(logFC)>1) #filtering
# processes= c("regulation of immune response", "innate immune response","type I interferon signaling pathway" ,"immune response","defense response to virus",
#              "cytokine activity","immunoglobulin receptor binding")
processes= c("regulation of immune response", "innate immune response","type I interferon signaling pathway" ,"immune response","defense response to virus",
"cytokine activity")
chord <- chord_dat(circ,gene_mat,processes)
png(file = paste0("/Users/burcutepekule/Dropbox/UZH_PROJECTS/HIV_TB/Code_v4/R/chord.png"),   # The directory you want to save the file in
width     = 16,
height    = 16,
units     = "in",
res       = 300)
# plotChord = GOChord(chord, space = 0.02, gene.order = 'logFC', gene.space = 0.25, gene.size = 5)
# "#FF0000" "#FFFF00" "#00FF00" "#00FFFF" "#0000FF" "#FF00FF"
GOChord(chord, space = 0.02, gene.order = 'logFC', gene.space = 0.25, gene.size = 5)
dev.off()
genes_used = rownames(chord)
#
chord
circ
View(circ)
circ_t1 = circ %>% filter(term=='Type 1 interferon')
unique(circ$term)
circ_t1 = circ %>% filter(term=="type I interferon signaling pathway")
View(circ_t1)
chord
chord[,3]
chord[which(chord[,3]==1),3]
View(circ)
View(circ_t1)
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/05062023/RDATA';
fileList = list.files(path =pathModelOutput, pattern='.RData')
fileList
fileNamePick  = paste0(pathModelOutput,"/MODEL_C0_1686000138.RData")
### load the model object - clean up afterwards
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
fit           = loadedModel
fitSummary    = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
list_of_draws
n_chains <- fit@sim$chains
n_warmup <- fit@sim$warmup2[1]
n_iter   <-fit@sim$iter[[1]]
print(c(n_iter,n_warmup,n_chains))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
View(summaryTable)
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))] )
View(summaryTable_use)
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
taxa_array     = unique(saved_data_infant$taxa)
View(data_subjects_HIV_NEG)
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
#### totalAbundance_df : increase in total abundance over time - this is needed to be used as the denominator of the interaction parameters
# abundanceArray_allSubjects
# abundanceArray_allSubjects_mum
# saved_data
# saved_data_milkandsolid
# saved_data_solid
# abundanceArray_meanSubjects
taxa_array     = unique(saved_data_infant$taxa)
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
taxa_array     = unique(saved_data_infant$taxa)
pathModelOutput='/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan/OUT/05062023/RDATA';
fileNamePick  = paste0(pathModelOutput,"/MODEL_C0_1686000138.RData")
temp.space <- new.env()
bar <- load(fileNamePick, temp.space)
loadedModel <- get(bar, temp.space)
rm(temp.space)
#################################################
fit           = loadedModel
fitSummary    = summary(fit)
posterior     = as.array(fit)
list_of_draws = rstan::extract(loadedModel)
n_chains <- fit@sim$chains
n_warmup <- fit@sim$warmup2[1]
n_iter   <-fit@sim$iter[[1]]
print(c(n_iter,n_warmup,n_chains))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))] )
View(summaryTable_use)
View(summaryTable_use)
taxa_array
taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
taxa_array
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))] )
View(summaryTable_use)
as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(loadedModel,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
taxa_array = c(paste0(taxa_array,"_uncoated"),paste0(taxa_array,"_coated"))
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))] )
View(summaryTable_use)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
abundanceArray_meanSubjects_longer
abundanceArray_allSubjects
View(abundanceArray_meanSubjects)
View(abundanceArray_meanSubjects)
colnames(abundanceArray_meanSubjects)
rownames(abundanceArray_meanSubjects)
abundanceArray_meanSubjects$day = as.numeric(rownames(abundanceArray_meanSubjects))
View(abundanceArray_meanSubjects)
abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
View(abundanceArray_meanSubjects)
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects %>% pivot_longer(!day,names_to = "taxa", values_to = "abundance")
View(abundanceArray_meanSubjects_longer)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
# geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
# Set-up
library(tidyverse)
library(lubridate)
library(rstan)
library(cowplot)
library(readxl)
library(foreign)
library(xtable)
library(rstan)
library(zoo)
library(Rcpp)
data_time     = c(0,1,2,3,20,50,180) #days
data_abundance= c(10^3,10^4,10^6,10^8,10^9,10^10,10^10) #rDNA copies/g
df_abundance  = tibble(t = data_time, y = data_abundance)
fit_abundance = nls(y ~ SSlogis(t, Asym, xmid, scal), data = df_abundance)
coeffs_abundance = coef(fit_abundance)
Asym        = coeffs_abundance[[1]]
xmid        = coeffs_abundance[[2]]
scal        = coeffs_abundance[[3]]
t_abundance = seq(0,720)
totalAbundance    = Asym/(1+exp((xmid-t_abundance)/scal));
totalAbundance_df = as.data.frame(cbind(t_abundance,totalAbundance))
colnames(totalAbundance_df)=c('day','total_abundance')
View(totalAbundance_df)
Asym
totalAbundance = totalAbundance/Asym
totalAbundance_df = as.data.frame(cbind(t_abundance,totalAbundance))
colnames(totalAbundance_df)=c('day','total_abundance')
View(totalAbundance_df)
randsample(10, 5, replacement = TRUE, w = c(0,0,0, 1, 1, 1, 1, 0,0,0))
install.packages('pracma')
library(pracma)
randsample(10, 5, replacement = TRUE, w = c(0,0,0, 1, 1, 1, 1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 1, 1, 1, 1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
randsample(10, 5, replacement = FALSE, w = c(0,0,0, 0.5, 0.3, 0.1, 0.1, 0,0,0))
100/120*98
100/(120+98)
60*0.46
98*0.46
