ch = 150
M_model  = stan_model("MODELS/MODEL_TOY_2.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,chains=2,init="random")
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_mu           = c(0.15,1),
p_a_inter      = c(1,0.1),
p_a_intra      = c(0,1),
p_phi          = 1/1E-3,
t0        = 0, #starting time
t0_data   = 0, #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_mu           = c(0.15,1),
p_a_inter      = c(1,0.1),
p_a_intra      = c(0,1),
p_phi          = 1/1E-3,
t0        = 0, #starting time
t0_data   = 0, #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_TOY_2.rds")){
file.remove("MODELS/MODEL_TOY_2.rds")
}
sinking = 0
wu = 50
ch = 150
M_model  = stan_model("MODELS/MODEL_TOY_2.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,chains=2,init="random")
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
graphics.off()
ggplot(summaryTable_use, aes(x = t, y = mean, color = taxa)) + geom_point()
View(summaryTable)
pp = c("output_pred")
model_output_all = summary(T_model,pp)[[1]] %>%
tibble::as_tibble() %>%
mutate(t=rep(1:data_list$t_sim_end,3),
date=1+t-1,
eta="-100%",
type=rep(pp,each=data_list$S)) %>%
mutate(populations=factor(type,levels=pp,
labels=c("S.aureus (alone)",
"S.aureus (with C.pseu)", "C.pseudodiphtheriticum (with S. aureus)",
"S.aureus (with D.pigrum)","D.pigrum (with S. aureus)",
"S.aureus (in mix)","C.pseudodiphtheriticum (in mix)","D.pigrum (in mix)")))
data_list$t_sim_end
model_output_all = summary(T_model,pp)[[1]] %>%
tibble::as_tibble() %>%
mutate(t=rep(1:data_list$t_sim_end,3),
date=1+t-1,
eta="-100%",
type=rep(pp,each=data_list$t_sim_end)) %>%
mutate(populations=factor(type,levels=pp,
labels=c("y")))
model_output_all = summary(T_model,pp)[[1]] %>%
tibble::as_tibble() %>%
mutate(t=rep(1:data_list$t_sim_end,3),
date=1+t-1,
eta="-100%",
type=rep(pp,each=data_list$t_sim_end)) %>%
mutate(populations=factor(type,levels=pp,labels=c("y")))
View(summaryTable_use)
View(abundanceArray_meanSubjects_longer)
View(abundanceArray_meanSubjects)
View(abundanceArray_meanSubjects_longer)
View(summaryTable_use)
View(summaryTable_use)
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','`2.5%`','`97.5%`','`50%`')]
View(summaryTable)
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=model_output_plot,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ populations ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ populations ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
graphics.off()
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=1) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=0) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
# facet_wrap(~ taxa ,scales="free",nrow=0) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(summaryTable_use)
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = as.factor(summaryTable_use$taxa)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=0) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=1) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(abundanceArray_meanSubjects_longer)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
View(summaryTable_use)
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
t_end=30
source('TOY_MODEL_ODE.R')
# HUMAN MICROBIOME PROJECT DATA
# y0_meanSubjects
# abundanceArray_meanSubjects
scaleUp = 0
if(scaleUp==1){
out_use                     = round(10^6*out_use)
abundanceArray_meanSubjects = out_use[2:dim(out_use)[1],]
y0_meanSubjects             = 10^6*out_init
phi_use                     = 10^4
}else{
out_use                     = (out_use)
abundanceArray_meanSubjects = out_use[2:dim(out_use)[1],]
y0_meanSubjects             = out_init
phi_use                     = 10^-1
}
days_array                  = out[2:dim(out)[1],]$time
taxa_array                  = colnames(out_use)
graphics.off()
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects
abundanceArray_meanSubjects_longer$day = as.numeric(rownames(abundanceArray_meanSubjects_longer))-1
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% pivot_longer( !day, names_to = "taxa", values_to = "abundance")
abundanceArray_meanSubjects_longer$taxa=as.factor(abundanceArray_meanSubjects_longer$taxa)
abundanceArray_meanSubjects_longer$day=as.factor(abundanceArray_meanSubjects_longer$day)
abundanceArray_meanSubjects_longer$abundance=as.numeric(abundanceArray_meanSubjects_longer$abundance)
library("ggplot2")
ggplot(abundanceArray_meanSubjects_longer, aes(x = day, y = abundance, color = taxa)) + geom_point()
dim(abundanceArray_meanSubjects_longer)
#cut short for debugging
# abundanceArray_meanSubjects = abundanceArray_meanSubjects[1:5,]
# days_array = as.numeric(rownames(abundanceArray_meanSubjects))+1
library(hablar)
abundanceArray_meanSubjects = tibble(abundanceArray_meanSubjects)
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_mu           = c(0.15,1),
p_a_inter      = c(1,0.1),
p_a_intra      = c(0,1),
p_phi          = 1/1E-2,
t0        = 0, #starting time
t0_data   = 0, #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_TOY_2.rds")){
file.remove("MODELS/MODEL_TOY_2.rds")
}
sinking = 0
wu = 50
ch = 150
M_model  = stan_model("MODELS/MODEL_TOY_2.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,chains=2,init="random")
# if (sinking==0){
#   M_model  = stan_model("MODELS/MODEL_TOY_2.stan")
#   T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,chains=1,init="random")
# }else{
#   sink("sink-examp.txt")
#   M_model  = stan_model("MODELS/MODEL_TOY_2.stan")
#   T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,chains=1,init="random")
#   sink()
#   closeAllConnections()
# }
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
graphics.off()
ggplot(summaryTable_use, aes(x = t, y = mean, color = taxa)) + geom_point()
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
View(summaryTable)
compartment_names = 'a_'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
compartment_names = 'a_'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
compartment_names = 'a_11'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
View(summaryTable)
compartment_names = c('a_11','a_22','a_33')
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
View(summaryTable)
rexp(n, rate = 1/1e-3)
rexp(100, rate = 1/1e-3)
rexp(100, rate = 1/1e-1)
rexp(100, rate = 1/1e-0)
rexp(100, rate = 1/1e-2)
hourstr     = format(Sys.Date(), "%hh%mm")
hourstr     = Sys.time()
hourstr
hourstr     = as.numeric(Sys.time())
hourstr
timestamp
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source('RESHAPE_DATA_KNIGHT.R')
# HUMAN MICROBIOME PROJECT DATA
# y0_meanSubjects
# abundanceArray_meanSubjects
# data_knight_M5_t, day_grid_M5
# data_knight_F5_t, day_grid_F5
## scale up
# scale = 1E11 # TOO BIG
scale   = 0 # DOABLE
indexes = 1:10 # to experiment
if(scale>0){
y0_meanSubjects             = round(scale*y0_meanSubjects)
names(y0_meanSubjects)      = colnames(abundanceArray_meanSubjects)
days_array = as.numeric(rownames(abundanceArray_meanSubjects))
taxa_array = colnames(abundanceArray_meanSubjects)
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.numeric(x))) #normalize and scale to absolute abundance
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.integer(round(scale*x)))) #normalize and scale to absolute abundance
abundanceArray_meanSubjects_longer$abundance = as.integer(round(scale*abundanceArray_meanSubjects_longer$abundance)) #normalize and scale to absolute abundance
phi_use_exp                 = max(round(log10(y0_meanSubjects)));
phi_use                     = 10^phi_use_exp # SEEMS LIKE 1E6 IS THE ONE THAT WORKS, SO NEED TO GET THIS FROM THE ORDER OF MAG. OF THE DATA
}else{
names(y0_meanSubjects)      = colnames(abundanceArray_meanSubjects)
days_array = as.numeric(rownames(abundanceArray_meanSubjects))
taxa_array = colnames(abundanceArray_meanSubjects)
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.numeric(x))) #normalize and scale to absolute abundance
phi_use_exp                 = max((log10(y0_meanSubjects)));
phi_use                     = 10^phi_use_exp # SEEMS LIKE 1E6 IS THE ONE THAT WORKS, SO NEED TO GET THIS FROM THE ORDER OF MAG. OF THE DATA
}
abundanceArray_meanSubjects = abundanceArray_meanSubjects[,indexes]
y0_meanSubjects             = y0_meanSubjects[indexes]
taxa_array                  = taxa_array[indexes]
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(taxa %in% taxa_array)
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0           = y0_meanSubjects,
observations = tibble(abundanceArray_meanSubjects),
p_mu           = c(0,2),
p_a_intra      = c(0,2),
p_a_inter      = c(0,2),
p_phi          = 1/phi_use,
t0        = 0, #starting time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
wu = 50
ch = 100
scale
M_model  = stan_model("MODELS/MODEL_B0_FLT.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,seed=144,chains=4,init="random")
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source('RESHAPE_DATA_KNIGHT.R')
# HUMAN MICROBIOME PROJECT DATA
# y0_meanSubjects
# abundanceArray_meanSubjects
# data_knight_M5_t, day_grid_M5
# data_knight_F5_t, day_grid_F5
## scale up
# scale = 1E11 # TOO BIG
scale   = 0 # DOABLE
indexes = 1:10 # to experiment
if(scale>0){
y0_meanSubjects             = round(scale*y0_meanSubjects)
names(y0_meanSubjects)      = colnames(abundanceArray_meanSubjects)
days_array = as.numeric(rownames(abundanceArray_meanSubjects))
taxa_array = colnames(abundanceArray_meanSubjects)
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.numeric(x))) #normalize and scale to absolute abundance
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.integer(round(scale*x)))) #normalize and scale to absolute abundance
abundanceArray_meanSubjects_longer$abundance = as.integer(round(scale*abundanceArray_meanSubjects_longer$abundance)) #normalize and scale to absolute abundance
phi_use_exp                 = max(round(log10(y0_meanSubjects)));
phi_use                     = 10^phi_use_exp # SEEMS LIKE 1E6 IS THE ONE THAT WORKS, SO NEED TO GET THIS FROM THE ORDER OF MAG. OF THE DATA
}else{
names(y0_meanSubjects)      = colnames(abundanceArray_meanSubjects)
days_array = as.numeric(rownames(abundanceArray_meanSubjects))
taxa_array = colnames(abundanceArray_meanSubjects)
abundanceArray_meanSubjects = as.data.frame(lapply(abundanceArray_meanSubjects, function(x) as.numeric(x))) #normalize and scale to absolute abundance
phi_use_exp                 = max((log10(y0_meanSubjects)));
phi_use                     = 10^phi_use_exp # SEEMS LIKE 1E6 IS THE ONE THAT WORKS, SO NEED TO GET THIS FROM THE ORDER OF MAG. OF THE DATA
}
abundanceArray_meanSubjects = abundanceArray_meanSubjects[,indexes]
y0_meanSubjects             = y0_meanSubjects[indexes]
taxa_array                  = taxa_array[indexes]
abundanceArray_meanSubjects_longer = abundanceArray_meanSubjects_longer %>% filter(taxa %in% taxa_array)
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0           = y0_meanSubjects,
observations = tibble(abundanceArray_meanSubjects),
p_mu           = c(0,2),
p_a_intra      = c(0,2),
p_a_inter      = c(0,2),
p_phi          = 1/phi_use,
t0        = 0, #starting time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
wu = 50
ch = 100
if(scale>0){ # NEGATIVE BINOMIAL LIKELIHOOD
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_B0_INT.rds")){
file.remove("MODELS/MODEL_B0_INT.rds")
}
M_model  = stan_model("MODELS/MODEL_B0_INT.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,seed=144,chains=4,init="random")
}else{ # NORMAL LIKELIHOOD
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_B0_FLT.rds")){
file.remove("MODELS/MODEL_B0_FLT.rds")
}
M_model  = stan_model("MODELS/MODEL_B0_FLT.stan")
T_model  = sampling(M_model,data = data_list,warmup=wu,iter=ch,seed=144,chains=4,init="random")
}
todaystr    = format(Sys.Date(), "%d%m%Y");
tstamp      = as.numeric(Sys.time());
direc2save  = paste0("OUT/",todaystr,"/RDATA")
mkdir(direc2save)
save(T_model, file = paste0(direc2save,"/T_model_",tstamp,".RData"))
compartment_names = 'output_pred'
summaryTable = as.data.frame(summary(T_model,compartment_names)[[1]])
summaryTable$populationNames = rownames(summaryTable)
summaryTable$t    = sub(",.*","",sub(".*\\[", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable$taxa = sub("\\].*","",sub(".*,", "", summaryTable$populationNames))  # Extract characters after pattern
summaryTable_use = summaryTable[c('t','taxa','mean','2.5%','97.5%','50%')]
summaryTable_use$t = as.numeric(summaryTable_use$t)
summaryTable_use$mean = as.numeric(summaryTable_use$mean)
summaryTable_use$`97.5%` = as.numeric(summaryTable_use$`97.5%`)
summaryTable_use$`2.5%` = as.numeric(summaryTable_use$`2.5%`)
summaryTable_use$`50%` = as.numeric(summaryTable_use$`50%`)
summaryTable_use$taxa = paste0('y_',summaryTable_use$taxa)
summaryTable_use = summaryTable_use %>% rowwise() %>% mutate(taxa = taxa_array[as.numeric(sub(",.*","",sub(".*\\_", "", taxa)))] )
graphics.off()
ggplot() +
geom_point(data=abundanceArray_meanSubjects_longer,aes(x=day,y=abundance,fill=taxa),shape=21,size=1,colour = "black", fill = "white") +
geom_ribbon(data=summaryTable_use,aes(x=t,ymin=`2.5%`,ymax=`97.5%`,fill=taxa),alpha=.5) +
geom_line(data=summaryTable_use,aes(x=t,y=`50%`),colour="black") +
facet_wrap(~ taxa ,scales="free",nrow=2) +
scale_colour_manual(values=c("grey20","grey"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
# scale_y_continuous(trans = 'log10')+
labs(x="sample index",y="abundance")
# graphics.off()
# ggplot(summaryTable_use, aes(x = t, y = mean, color = taxa)) + geom_point()
direc2save
tstamp
round(tstamp)
save(T_model, file = paste0(direc2save,"/T_model_",round(tstamp),".RData"))
