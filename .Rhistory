data_knight_M5 = data_knight_M5 %>% relocate(family)
View(data_knight_M5)
numeric_cols <- names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
numeric_cols
View(data_knight_M5)
day_grid      = as.numeric(numeric_cols)
day_grid
data_knight_M5 = data_knight_M5[, lapply(.SD, function(x) x/sum(x)), .SDcols = numeric_cols]
data_knight_M5 = data_knight_M5[, lapply(.SD, function(x) x/sum(x))]
data_knight_M5 = data_knight_M5[, lapply(.SD, function(x) x/sum(x)), .SD = numeric_cols]
data_knight_M5[, (numeric_cols) := lapply(numeric_cols, function(x) get(x) / sum(get(x)))]
data_knight_M5[, (cols) := lapply(cols, function(x) get(x) / sum(get(x)))]
library(data.table)
data_knight_M5[, lapply(.SD, function(x) x/sum(x)), .SDcols = numeric_cols]
data_knight_M5[, 3:6] <- lapply(data_knight_M5[, 3:6], function(x) x/sum(x))
View(data_knight_M5)
colSums(data_knight_M5[, 3:6])
numeric_cols
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) x/sum(x))
View(data_knight_M5)
# sanity check
colSums(data_knight_M5[,numeric_cols])
# sanity check
which(colSums(data_knight_M5[,numeric_cols])~=1)
# sanity check
which(colSums(data_knight_M5[,numeric_cols])!=1)
# sanity check
which(colSums(data_knight_M5[,numeric_cols])==1)
# sanity check -> all 1
colSums(data_knight_M5[,numeric_cols])
# sanity check -> all 1
mean(colSums(data_knight_M5[,numeric_cols]))
data_knight_F3 = data_knight_F3 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_F5 = data_knight_F5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_F5 = data_knight_F5[,2:dim(data_knight_F5)[2]]
data_knight_F5 = data_knight_F5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_F5)[sapply(data_knight_F5, is.numeric)]
day_grid_F5   = as.numeric(numeric_cols) # sampling days
data_knight_F5[, numeric_cols] <- lapply(data_knight_F5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_F5[,numeric_cols]))
data_knight_F5 = data_knight_F5[, lapply(.SD, function(x) x/sum(x)), .SDcols = numeric_cols]
numeric_cols
# Setup
setwd(getwd())
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(prodlim)
library(matrixStats)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(text.alignment)
library(vegan)
library(ggplot2)
library(useful)
library(MatchIt)
library(knitr)
library(mixtools)
library(latex2exp)
library(png)
library('colorspace')
library(patchwork)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(data.table)
# sampled daily
data_knight_M5 = read_excel('KNIGHT_DATA/M3_feces_L5.xlsx',col_names = TRUE, skip=1)
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR MALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_M5 = data_knight_M5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_M5 = data_knight_M5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_M5 = data_knight_M5[,2:dim(data_knight_M5)[2]]
data_knight_M5 = data_knight_M5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
day_grid_M5   = as.numeric(numeric_cols) # sampling days
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_M5[,numeric_cols]))
data_knight_M5 = data_knight_M5[, lapply(.SD, function(x) x/sum(x)), .SDcols = numeric_cols]
View(data_knight_M5)
View(data_knight_F5)
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
View(data_knight_F5)
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_F5 = data_knight_F5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_F5 = data_knight_F5[,2:dim(data_knight_F5)[2]]
data_knight_F5 = data_knight_F5 %>% relocate(family)
View(data_knight_F5)
# relative abundance?
numeric_cols  = names(data_knight_F5)[sapply(data_knight_F5, is.numeric)]
numeric_cols
day_grid_F5   = as.numeric(numeric_cols) # sampling days
data_knight_F5[, numeric_cols] <- lapply(data_knight_F5[, numeric_cols], function(x) x/sum(x)) #normalize
View(data_knight_F5)
View(data_knight_F5)
data_knight_F5 = data_knight_F5 %>% filter(family %in% families)
View(data_knight_F5)
data_knight_F5_keep = data_knight_F5
t(data_knight_F5)
data_knight_F5_t = t(data_knight_F5)
data_knight_F5_t = as.data.frame(t(data_knight_F5))
View(data_knight_F5_t)
View(data_knight_F5_t)
colnames(data_knight_F5_t) = data_knight_F5_t[1,]
View(data_knight_F5_t)
data_knight_F5_t = data_knight_F5_t[2:dim(data_knight_F5_t)[1],]
View(data_knight_F5_t)
dim(data_knight_F5_t)
day_grid_M5
dim(day_grid_M5)
length(day_grid_M5)
View(data_knight_F5_t)
View(data_knight_F5_keep)
day_grid_M5
# Setup
setwd(getwd())
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(prodlim)
library(matrixStats)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(text.alignment)
library(vegan)
library(ggplot2)
library(useful)
library(MatchIt)
library(knitr)
library(mixtools)
library(latex2exp)
library(png)
library('colorspace')
library(patchwork)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(data.table)
# sampled daily
data_knight_M5 = read_excel('KNIGHT_DATA/M3_feces_L5.xlsx',col_names = TRUE, skip=1)
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR MALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_M5 = data_knight_M5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_M5 = data_knight_M5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_M5 = data_knight_M5[,2:dim(data_knight_M5)[2]]
data_knight_M5 = data_knight_M5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
day_grid_M5   = as.numeric(numeric_cols) # sampling days
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_M5[,numeric_cols]))
View(data_knight_M5)
dim(data_knight_F5)
length(day_grid_F5)
# Setup
setwd(getwd())
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(prodlim)
library(matrixStats)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(text.alignment)
library(vegan)
library(ggplot2)
library(useful)
library(MatchIt)
library(knitr)
library(mixtools)
library(latex2exp)
library(png)
library('colorspace')
library(patchwork)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(data.table)
# sampled daily
data_knight_M5 = read_excel('KNIGHT_DATA/M3_feces_L5.xlsx',col_names = TRUE, skip=1)
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR MALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_M5 = data_knight_M5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_M5 = data_knight_M5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_M5 = data_knight_M5[,2:dim(data_knight_M5)[2]]
data_knight_M5 = data_knight_M5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
day_grid_M5   = as.numeric(numeric_cols) # sampling days
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_M5[,numeric_cols]))
day_grid_M5
length(day_grid_M5)
dim(data_knight_M5)
# Setup
setwd(getwd())
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(prodlim)
library(matrixStats)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(text.alignment)
library(vegan)
library(ggplot2)
library(useful)
library(MatchIt)
library(knitr)
library(mixtools)
library(latex2exp)
library(png)
library('colorspace')
library(patchwork)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(data.table)
# sampled daily
data_knight_M5 = read_excel('KNIGHT_DATA/M3_feces_L5.xlsx',col_names = TRUE, skip=1)
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR MALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_M5 = data_knight_M5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_M5 = data_knight_M5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_M5 = data_knight_M5[,2:dim(data_knight_M5)[2]]
data_knight_M5 = data_knight_M5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
day_grid_M5   = as.numeric(numeric_cols) # sampling days
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_M5[,numeric_cols]))
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_F5 = data_knight_F5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_F5 = data_knight_F5[,2:dim(data_knight_F5)[2]]
data_knight_F5 = data_knight_F5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_F5)[sapply(data_knight_F5, is.numeric)]
day_grid_F5   = as.numeric(numeric_cols) # sampling days
data_knight_F5[, numeric_cols] <- lapply(data_knight_F5[, numeric_cols], function(x) x/sum(x)) #normalize
# #### sanity check -> all 1
# mean(colSums(data_knight_F5[,numeric_cols]))
# FILTER FOR FAMILIES
families = c('Bifidobacteriaceae','Enterobacteriaceae','Lachnospiraceae','Streptococcaceae',
'Bacteroidaceae','Enterococcaceae','Staphylococcaceae','Peptostreptococcaceae',
'Clostridiaceae','Ruminococcaceae')
data_knight_M5 = data_knight_M5 %>% filter(family %in% families)
data_knight_M5_keep = data_knight_M5
data_knight_M5_t    = as.data.frame(t(data_knight_M5))
colnames(data_knight_M5_t) = data_knight_M5_t[1,]
data_knight_M5_t = data_knight_M5_t[2:dim(data_knight_M5_t)[1],]
data_knight_F5 = data_knight_F5 %>% filter(family %in% families)
data_knight_F5_keep = data_knight_F5
data_knight_F5_t    = as.data.frame(t(data_knight_F5))
colnames(data_knight_F5_t) = data_knight_F5_t[1,]
data_knight_F5_t = data_knight_F5_t[2:dim(data_knight_F5_t)[1],]
View(data_knight_M5_t)
View(data_knight_M5_t)
dim(data_knight_M5_t)
dim(data_knight_F5_t)
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source('RESHAPE_DATA_KNIGHT.R')
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source("PREPARE_MILK.R")
source("RESHAPE_DATA_YAGAHI.R")
##### OUTPUTS:
#### saved_data : df of all data
#### saved_data_milkandsolid : df keeping the day of transition to mixed feeding
#### saved_data_solid : df keeping the day of transition to solid feeding
#### abundanceArray_allSubjects : 3D array of abundances per subject per taxa per time point
#### abundanceArray_allSubjects_mum : 3D array of abundances per subject's mum at sampled time point
#### abundanceArray_allSubjects[days,subject,taxa]
#### abundanceArray_allSubjects_mum[days,subject,taxa]
#### taxa_array : array of taxa used
#### days_array : array of time points (days) used
#### subjects_array : array of subjects used
#### abundanceArray_meanSubjects : 2D array of abundances per taxa per time point (avgd over subjects)
abundanceArray_allSubjects
abundanceArray_allSubjects_mum
saved_data
saved_data_milkandsolid
saved_data_solid
abundanceArray_meanSubjects
View(abundanceArray_meanSubjects)
y0_meanSubjects
ss_coating  = 0.36
coated_y0   = ss_coating*abundanceArray_allSubjects_mum
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum
abundanceArray_allSubjects_mum_reshaped = array_reshape(abundanceArray_allSubjects_mum, c(length(subjects_array), length(taxa_array)))
colnames(abundanceArray_allSubjects_mum_reshaped) = taxa_array
rownames(abundanceArray_allSubjects_mum_reshaped) = subjects_array
uncoated_y0 = (1-ss_coating)*abundanceArray_allSubjects_mum_reshaped
coated_y0   = ss_coating*abundanceArray_allSubjects_mum_reshaped
y0_allSubjects = cbind(uncoated_y0,coated_y0)
y0_meanSubjects= colMeans(y0_allSubjects)
y0_meanSubjects
source('RESHAPE_DATA_KNIGHT.R')
data_knight_M5_t
abundanceArray_meanSubjects = 10^11*data_knight_M5_t
View(data_knight_M5_t)
# Setup
setwd(getwd())
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(prodlim)
library(matrixStats)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(text.alignment)
library(vegan)
library(ggplot2)
library(useful)
library(MatchIt)
library(knitr)
library(mixtools)
library(latex2exp)
library(png)
library('colorspace')
library(patchwork)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(data.table)
# sampled daily
data_knight_M5 = read_excel('KNIGHT_DATA/M3_feces_L5.xlsx',col_names = TRUE, skip=1)
data_knight_F5 = read_excel('KNIGHT_DATA/F4_feces_L5.xlsx',col_names = TRUE, skip=1)
######## FOR MALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_M5 = data_knight_M5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_M5 = data_knight_M5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_M5 = data_knight_M5[,2:dim(data_knight_M5)[2]]
data_knight_M5 = data_knight_M5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_M5)[sapply(data_knight_M5, is.numeric)]
day_grid_M5   = as.numeric(numeric_cols) # sampling days
data_knight_M5[, numeric_cols] <- lapply(data_knight_M5[, numeric_cols], function(x) (10^11)*x/sum(x)) #normalize and scale to absolute abundance
# #### sanity check -> all 1
# mean(colSums(data_knight_M5[,numeric_cols]))
######## FOR FEMALE SUBJECT
# TAKE THE STRING AFTER f_
data_knight_F5 = data_knight_F5 %>% dplyr::rowwise() %>% dplyr::mutate(family=sub(".*f\\__", "", `#OTU ID`))
data_knight_F5 = data_knight_F5 %>% filter(family!="")
# there are two rows for Erysipelotrichaceae, but that's not a concern for me (not in my focal families)
data_knight_F5 = data_knight_F5[,2:dim(data_knight_F5)[2]]
data_knight_F5 = data_knight_F5 %>% relocate(family)
# relative abundance?
numeric_cols  = names(data_knight_F5)[sapply(data_knight_F5, is.numeric)]
day_grid_F5   = as.numeric(numeric_cols) # sampling days
data_knight_F5[, numeric_cols] <- lapply(data_knight_F5[, numeric_cols], function(x) (10^11)*x/sum(x)) #normalize and scale to absolute abundance
# #### sanity check -> all 1
# mean(colSums(data_knight_F5[,numeric_cols]))
# FILTER FOR FAMILIES
families = c('Bifidobacteriaceae','Enterobacteriaceae','Lachnospiraceae','Streptococcaceae',
'Bacteroidaceae','Enterococcaceae','Staphylococcaceae','Peptostreptococcaceae',
'Clostridiaceae','Ruminococcaceae')
data_knight_M5 = data_knight_M5 %>% filter(family %in% families)
data_knight_M5_keep = data_knight_M5
data_knight_M5_t    = as.data.frame(t(data_knight_M5))
colnames(data_knight_M5_t) = data_knight_M5_t[1,]
data_knight_M5_t = data_knight_M5_t[2:dim(data_knight_M5_t)[1],]
data_knight_F5 = data_knight_F5 %>% filter(family %in% families)
data_knight_F5_keep = data_knight_F5
data_knight_F5_t    = as.data.frame(t(data_knight_F5))
colnames(data_knight_F5_t) = data_knight_F5_t[1,]
data_knight_F5_t = data_knight_F5_t[2:dim(data_knight_F5_t)[1],]
# data_knight_M5_t, day_grid_M5
# data_knight_F5_t, day_grid_F5
View(data_knight_M5_t)
View(data_knight_M5_t)
y0_meanSubjects = abundanceArray_meanSubjects[1,]
y0_meanSubjects
y0_meanSubjects = unlist(abundanceArray_meanSubjects[1,])
y0_meanSubjects
days_array = day_grid_M5
days_array
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_growth_rates = c(2,5), # ~ beta
p_interaction_terms_diag = c(2,5),# ~ beta
p_interaction_terms_nondiag = c(0,1),# ~ normal
p_phi       = 1/100, # ~ exponential
t0        = 0, #starting time
t0_data   = days_array[1], #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_B0.rds")){
file.remove("MODELS/MODEL_B0.rds")
}
M_model  = stan_model("MODELS/MODEL_B0.stan")
# Setup
rm(list=ls())
# setwd(getwd())
setwd('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/RStan')
source("SETUP.R")
source('RESHAPE_DATA_KNIGHT.R')
# HUMAN MICROBIOME PROJECT DATA
# y0_meanSubjects
# abundanceArray_meanSubjects
# data_knight_M5_t, day_grid_M5
# data_knight_F5_t, day_grid_F5
abundanceArray_meanSubjects = data_knight_M5_t
y0_meanSubjects = unlist(abundanceArray_meanSubjects[1,])
days_array = day_grid_M5
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_growth_rates = c(2,5), # ~ beta
p_interaction_terms_diag = c(2,5),# ~ beta
p_interaction_terms_nondiag = c(0,1),# ~ normal
p_phi       = 1/100, # ~ exponential
t0        = 0, #starting time
t0_data   = days_array[1], #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
taxa_array = families
taxa_array
data_list = list(
numTaxa      = length(taxa_array),
numTimeSteps = length(days_array),
y0 = y0_meanSubjects,
observations = abundanceArray_meanSubjects,
p_growth_rates = c(2,5), # ~ beta
p_interaction_terms_diag = c(2,5),# ~ beta
p_interaction_terms_nondiag = c(0,1),# ~ normal
p_phi       = 1/100, # ~ exponential
t0        = 0, #starting time
t0_data   = days_array[1], #index of first sample
t_sim_end = max(days_array), #total simulation time
t_data    = days_array, #time bins of data
ts_pred   = days_array #time bins of prediction (not doing prediction currently)
)
# RECOMPILE EACH TIME
if(file.exists("MODELS/MODEL_B0.rds")){
file.remove("MODELS/MODEL_B0.rds")
}
M_model  = stan_model("MODELS/MODEL_B0.stan")
M_model  = stan_model("MODELS/MODEL_B0.stan")
